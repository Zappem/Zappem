#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('maggot.io:server');
var http = require('http');

/**
 * Here looks like a good place to compile our assets.
 * We need to ensure we do this sync because we need assets to be compiled before the app starts.
 */

//  var scssToCompile = [
//     "main",
//     "login",
//     "exceptions"
//  ];

//  var jsToCompile = [
//     "main",
//     "login",
//     "exceptions"
//  ];

// var fs = require('fs');

// var sass = require('node-sass');
// var browserify = require('browserify');

// var sassCompile = null;
// var b = null;

// //SCSS

// for(var i = 0; i < scssToCompile.length; i++){
//   sassCompile = sass.renderSync({
//     file: './resources/scss/'+scssToCompile[i]+'.scss',
//     outFile: './public/css/'+scssToCompile[i]+'.css'
//   });

//   if(!sassCompile.err){
//     fs.writeFileSync('./public/css/'+scssToCompile[i]+'.css', sassCompile.css);
//   }

// }

// //JS

// for(i = 0; i < jsToCompile.length; i++){
//   b = browserify();
//   b.add('./resources/js/'+jsToCompile[i]+'.js');
//   b.bundle().pipe(fs.createWriteStream('./public/js/'+jsToCompile[i]+'.js'));  
// }


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

// function emitSocket(name, obj){
//   io.sockets.emit(name, obj);
// }

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

console.log('Zappem is now running');
console.log('In your browser, go to http://localhost:'+port);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
